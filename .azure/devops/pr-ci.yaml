trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: Web
  - name: nodeVersion
    value: '20.x'

steps:
  # Create .npm Cache Directory
  - script: |
      mkdir -p $(Pipeline.Workspace)/.npm
    displayName: 'Create .npm Cache Directory'

  # Cache Node Modules
  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | package-lock.json | v1'
      restoreKeys: |
        npm | "$(Agent.OS)" | package-lock.json
      path: '$(Pipeline.Workspace)/.npm'
    displayName: 'Cache Node Modules'

  # Step 1: Install Node.js
  - task: NodeTool@0
    inputs:
      versionSpec: '$(nodeVersion)'
    displayName: 'Install Node.js'

  # Step 2: Install Dependencies in CI mode
  - script: |
      npm ci --include=dev
    displayName: 'Install Dependencies in CI mode'

  # Step 3: Check Compilation Without Emission
  - script: |
      npm run compile-check
    displayName: 'Check Compilation Without Emission'

  # Step 4: Run Unit Tests with coverage
  - script: |
      npm run test:coverage
    displayName: 'Run Unit Tests with coverage'
    continueOnError: false

  # Step 5: Run Lint
  - script: |
      npm run lint
    displayName: 'Run Lint'

  # Step 6: Run NPM Audit for security vulnerabilities
  - script: |
      npm audit --audit-level=high
    displayName: 'Run NPM Audit'

  # Step 7: Compile TypeScript (Build Project)
  - script: |
      npm run build
    displayName: 'Build Project'

  # Step 7: Publish Code Coverage Results
  - task: PublishCodeCoverageResults@2
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/lcov.info'
      reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
      failIfCoverageEmpty: true
    displayName: 'Publish Code Coverage Results'

  # Publish Build Artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish Build Artifacts'
