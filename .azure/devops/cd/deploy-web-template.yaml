parameters:
  - name: environment
    type: string
  - name: envFile
    type: string
    default: .env.dev
    values:
      - .env.dev
      - .env.qa
      - .env.prod

stages:
  # -----------------------------
  # Stage 1: Read/Parse Config
  # -----------------------------
  - stage: ReadConfig
    displayName: 'Read Config Stage'
    jobs:
      - job: ParseConfig
        displayName: 'Parse environment JSON'
        steps:
          - script: |
              echo "Loading configuration for ${{ parameters.environment }}..."
              CONFIG_FILE=".azure/devops/config/${{ parameters.environment }}.json"

              export WEB_APP_NAME=$(jq -r '.webAppName' $CONFIG_FILE)
              export NODE_VERSION=$(jq -r '.nodeVersion' $CONFIG_FILE)
              export RESOURCE_GROUP=$(jq -r '.resourceGroup' $CONFIG_FILE)
              export KEY_VAULT_NAME=$(jq -r '.keyVaultName' $CONFIG_FILE)

              echo "##vso[task.setvariable variable=WEB_APP_NAME;isOutput=true]$WEB_APP_NAME"
              echo "##vso[task.setvariable variable=NODE_VERSION;isOutput=true]$NODE_VERSION"
              echo "##vso[task.setvariable variable=RESOURCE_GROUP;isOutput=true]$RESOURCE_GROUP"
              echo "##vso[task.setvariable variable=KEY_VAULT_NAME;isOutput=true]$KEY_VAULT_NAME"
            name: SetEnvVars

  # -----------------------------
  # Stage 2: Build & Push Docker
  # -----------------------------
  - stage: Build
    dependsOn: ReadConfig
    displayName: 'Build Stage'
    variables:
      # Capture outputs from the ReadConfig stage
      WEB_APP_NAME: $[ stageDependencies.ReadConfig.ParseConfig.outputs['SetEnvVars.WEB_APP_NAME'] ]
      NODE_VERSION: $[ stageDependencies.ReadConfig.ParseConfig.outputs['SetEnvVars.NODE_VERSION'] ]
      RESOURCE_GROUP: $[ stageDependencies.ReadConfig.ParseConfig.outputs['SetEnvVars.RESOURCE_GROUP'] ]
      KEY_VAULT_NAME: $[ stageDependencies.ReadConfig.ParseConfig.outputs['SetEnvVars.KEY_VAULT_NAME'] ]

      # For Docker
      DOCKERHUB_REPO: ''   // TODO FIX ME
      pnpm_config_cache: $(Pipeline.Workspace)/.pnpm-store
    jobs:
      - job: BuildApp
        displayName: 'Build Next.js App in Docker'
        steps:
          # 1. Checkout
          - checkout: self

          # 2. Use Node
          - task: NodeTool@0
            displayName: 'Use Node.js'
            inputs:
              versionSpec: $(NODE_VERSION)

          # 3. Setup PNPM
          - script: |
              corepack enable
              corepack prepare pnpm@latest-9 --activate
              pnpm config set store-dir $(pnpm_config_cache)
            displayName: 'Setup pnpm'

          - task: AzureKeyVault@2
            displayName: 'Fetch secrets from Key Vault'
            inputs:
              azureSubscription: 'azure-subscription-connection'
              KeyVaultName: $(KEY_VAULT_NAME)
              SecretsFilter: 'WebFirebaseApiKey'
              # By default, the Key Vault task maps each secret into an env variable
              # with the same name as the secret.

          # 5. Copy environment file (like .env.dev -> .env)
          - script: |
              echo "Copying environment file ${{ parameters.envFile }} to .env..."
              cp ${{ parameters.envFile }} .env

              printf "\nNEXT_PUBLIC_FIREBASE_API_KEY=%s\n" "$(WebFirebaseApiKey)" >> .env
            displayName: 'Set .env'

          # 6. Docker login
          - script: |
              docker login -u $(DOCKERHUB_USERNAME) -p $(DOCKERHUB_PASSWORD)
            displayName: 'Docker Login'
            env:
              DOCKERHUB_USERNAME: $(DOCKERHUB_USERNAME)
              DOCKERHUB_PASSWORD: $(DOCKERHUB_PASSWORD)

          # 7. Docker build & push
          - script: |
              echo "Building Docker image for Next.js..."
              docker build -t $(DOCKERHUB_REPO):${{ parameters.environment }}-$(Build.BuildId) -f Dockerfile .

              echo "Pushing Docker image to Docker Hub..."
              docker push $(DOCKERHUB_REPO):${{ parameters.environment }}-$(Build.BuildId)
            displayName: 'Docker Build & Push'

  # -----------------------------
  # Stage 3: Deploy
  # -----------------------------
  - stage: Deploy
    dependsOn:
      - ReadConfig
      - Build
    displayName: 'Deploy Stage'
    variables:
      WEB_APP_NAME: $[ stageDependencies.ReadConfig.ParseConfig.outputs['SetEnvVars.WEB_APP_NAME'] ]
      RESOURCE_GROUP: $[ stageDependencies.ReadConfig.ParseConfig.outputs['SetEnvVars.RESOURCE_GROUP'] ]
      DOCKERHUB_REPO: ''   // TODO FIX ME
    jobs:
      - job: DeployToAzure
        displayName: 'Deploy Next.js Docker Container to Azure'
        steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: 'Configure Docker Container on Web App'
            inputs:
              azureSubscription: 'azure-subscription-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Updating container to $(DOCKERHUB_REPO):${{ parameters.environment }}-$(Build.BuildId)"

                az webapp config container set \
                  --name $(WEB_APP_NAME) \
                  --resource-group $(RESOURCE_GROUP) \
                  --container-image-name "$(DOCKERHUB_REPO):${{ parameters.environment }}-$(Build.BuildId)" \
                  --container-registry-url "https://index.docker.io" \
                  --container-registry-user "$(DOCKERHUB_USERNAME)" \
                  --container-registry-password "$(DOCKERHUB_PASSWORD)"

                # Optionally, stop/start the app if needed
                # az webapp stop --name $(WEB_APP_NAME) --resource-group $(RESOURCE_GROUP)
                # az webapp start --name $(WEB_APP_NAME) --resource-group $(RESOURCE_GROUP)
